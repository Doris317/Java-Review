# MySQL的日志文件
## binlog 二进制日志文件
	二进制日志文件是在存储引擎的上层记录，任何一条引起或者可能引起数据库变化的语句都会以事件的形式存储。与redolog不一样的是。binlog是每次提交后一次执行写入的。
	binlog的记录格式有：
		* Statement：按照语句记录，每一条修改数据库数据的语句都会被记录
		* row：按照行记录，只记录引起行数据修改的事件，保证了数据的一致性但是记录量会比较大。
		* mixed：混合记录，由MySQL自己决定按照什么格式去记录
## redo log 重做日志，提供前滚操作
	是记录在InnoDb存储引擎层的物理日志，并非二进制日志，它记录的是数据库上每页的修改。所以二进制文件的记录方式与提交顺序有关，但重做日志并不是，因为同一个事务的提交可能有多次，它只记录最后以一个状态。也因此，重做日志的记录比较简练。
	二进制日志是在提交的时候执行一次性写入，而redo log因为事务性，需要在数据准备修改前先缓存到log中，然后对缓存中的数据执行修改，并保证在事务准备提交前先向缓存中的redo log写入日志然后在执行提交动作
## undo log 提供回滚操作以及行版本控制
	记录在存储引擎上的逻辑日志，是按行记录的。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。
	执行rollback的时候就可以从undo log的逻辑记录读取相应的内容并进行回滚。
	应用到行版本控制的时候，也是通过undo log来实现的：当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。
	undo log是按照segment格式存储的，每个rollback回滚段有1024个undo segment，默认存储在共享表空间。
	