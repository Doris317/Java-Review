# 设计模式
## 设计模式的六大原则
目的：低耦合，高内聚，增大代码可重用性
 * 单一职责：实现类的职责要单一
 * 里氏替换原则：继承的时候最好少修改基类已经实现的功能，不破坏继承体系
 * 依赖倒置原则：面向接口编程而不是面向具体的实现
 * 接口隔离原则：面向接口编程的时候，不能将所有的功能都堆在同一个接口中，这样实现接口的类就需要实现所有包括他不需要的功能。即细化接口
 * 迪米特原则：降低耦合，与直接依赖的类交互，其他的可以通过中间类去调用，降低组件之间的依赖。
 * 开闭原则
## 设计模式的分类
	* 创建型模式：用于解耦对象的实例化过程。	
		* 单例模式：某个类只能有一个实例，提供一个全局的访问点。
		* 简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。
		* 工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。
		* 抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。
		* 建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。
		* 原型模式：通过复制现有的实例来创建新的实例。
			抽象原型类需要继承Cloneable接口，并且重写Object类中的clone方法才能有复制粘贴的功能。
			具体原型继承抽象类就可以了。对于基本数据类型是可以直接调用super.clone()函数，而复杂数据类型需要手动clone的。
			优点：实例复制的时候是不需要调用构造函数的，避免了初始化占有的时间和空间。原型类的服务权限对于复制是无效的
	* 结构型模式：把类或对象结合在一起形成一个更大的结构。
		* 适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。
		* 组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构。
		* 装饰模式：动态的给对象添加新的功能。
		* 代理模式：为其他对象提供一个代理以便控制这个对象的访问。
		* 亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象。
			比如：线程池、连接池和String字符串常量池技术。
		* 外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。
		* 桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。
	* 行为型模式：类和对象如何交互，及划分责任和算法的定义。 
		* 模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。
		* 解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。
		* 策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。
			组件：上下文类、抽象策略接口和具体策略类
			根据动态传给上下文对象的策略对来决定使用什么策略，这是由调用者自己决定的。
			符合开闭原则，使用灵活，对于新增的策略只需要新增一个具体策略类；但是调用者必须明确知道具体策略都有哪些，然后决定使用哪个策略。
		* 状态模式：允许一个对象在其对象内部状态改变时改变它的行为。
		* 观察者模式：对象间的一对多的依赖关系。
		* 备忘录模式：在不破坏封装的前提下，保持对象的内部状态。
		* 中介者模式：用一个中介对象来封装一系列的对象交互。
		* 命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。
		* 访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。
		* 责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。
		* 迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。