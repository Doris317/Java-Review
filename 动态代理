# 动态代理
代理模式：一种结构型设计模式，给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。真正的处理逻辑是在被代理类，而代理类只是帮忙预处理信息。
代理模式的结构：1. 抽象的被代理类接口（主题接口）
				2. 具体实现的被代理类
				3. 代理类

根据字节码的创建时机来分类，可以分为静态代理和动态代理：
静态代理：在程序运行前就已经存在代理类的字节码文件，代理类和被代理类的关系在运行前就确定了。
			代理类也实现了主题接口，并拥有一个主题接口类型的对象（用于运行时动态确定具体被代理类对象）。
			优点：实现简单
			缺点：1）如果代理多个类的时候，代理类需要实现多个主题接口并拥有多个被代理类对象，会导致代理类很庞大
				  2）如果主题接口的功能有变更时，被代理类和代理类需要同时修改或者删除代码，不易维护。
		与策略模式的区别：代理类需要实现主题接口，他知道被代理类的功能；但是策略模式不需要实现策略接口，它通过组合的方式实现。两者都是在运行时动态转型。
动态代理：
	源码是在程序运行期间由JVM根据反射等机制动态的生成，所以在运行前并不存在代理类的字节码文件。
	1. JDK动态代理： 基于接口的方式，代理类和目标类实现同一接口
		1）代理类实现java.lang.reflect.InvocationHandler接口的public Object invoke(Object proxy, Method method, Object[] args)方法。
		2）具体实现时根据java.lang.reflect.Proxy类的Proxy.newProxyInstance(被代理类的classLoader, 被代理类的interfaces, 代理类的实例对象Handler)方法来动态生成代理类对象。
		java.lang.reflect.InvocationHandler接口：
			Object invoke(Object proxy, Method method, Object[] args) 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用
		java.lang.reflect.Proxy类
			static InvocationHandler getInvocationHandler(Object proxy) 用于获取指定代理对象所关联的调用处理器
			static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces) 返回指定接口的代理类
			static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法
			static boolean isProxyClass(Class<?> cl) 返回 cl 是否为一个代理类
	2. CGLIB动态代理：基于继承的方式，代理类去继承目标类，然后重写其中目标类的方法，以保证代理类和目标类具有同名方法。然后，每次调用代理类的方法都会被方法拦截器拦截，在拦截器中才是调用目标类的该方法的逻辑。
					  后面深入理解了再来补充。
		
		